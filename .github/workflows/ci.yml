name: Node.js CI Unix Platform

on: [push, pull_request]

jobs:
  test:
    timeout-minutes: 30
    strategy:
      matrix:
        node-version:
          # - node/10
          # - node/12
          # - node/14
          # - node/15
          - node/16
        compiler:
          - gcc
          # - clang
        os:
          - ubuntu-16.04 # ubuntu-18.04/ubuntu-latest missing package g++-4.9
          # - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Install system dependencies
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" -a "${{ matrix.os }}" = ubuntu-* ]; then
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install g++-4.9
        fi
        if [ "$COLLECT_COVERAGE" == "true" ]; then
          export GEM_HOME="$(ruby -e 'puts Gem.user_dir')"
          export PATH="$PATH:$GEM_HOME/bin"
          sudo gem install --user coveralls-lcov
          echo "PATH=\"$PATH\" GEM_HOME=\"$GEM_HOME\""
        fi
      env:
        COLLECT_COVERAGE: ${{ format('{0}-{1}-{2}', matrix.node-version, matrix.compiler, matrix.os) == 'node/16-gcc-ubuntu-16.04' }}
    - name: Use Node.js ${{ matrix.node-version }}
      run: |
        git clone --branch v1.4.2 --depth 1 https://github.com/jasongin/nvs ~/.nvs
        . ~/.nvs/nvs.sh
        nvs --version
        nvs add ${{ matrix.node-version }}
        nvs use ${{ matrix.node-version }}
        node --version
        npm --version
        npm install
    - name: npm test
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          export CC="gcc" CXX="g++"
        fi
        if [ "${{ matrix.compiler }}" = "gcc" -a "${{ matrix.os }}" = ubuntu-* ]; then
          export CC="gcc-4.9" CXX="g++-4.9" AR="gcc-ar-4.9" RANLIB="gcc-ranlib-4.9" NM="gcc-nm-4.9"
        fi
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC="clang" CXX="clang++"
        fi
        export CFLAGS="$CFLAGS -O3" CXXFLAGS="$CXXFLAGS -O3"
        if [ "$COLLECT_COVERAGE" == "true" ]; then
          export CFLAGS="$CFLAGS --coverage" CXXFLAGS="$CXXFLAGS --coverage" LDFLAGS="$LDFLAGS --coverage"
        fi
        echo "CFLAGS=\"$CFLAGS\" CXXFLAGS=\"$CXXFLAGS\" LDFLAGS=\"$LDFLAGS\""
        npm run pretest -- --verbose
        node test/date.js
        find . -iname '*.gcda'
        coveralls-lcov test/build/$(node -p "process.config.target_defaults.default_configuration")/coverage.info --repo-token ${{ secrets.COVERALLS_REPO_TOKEN }}
      env:
        COLLECT_COVERAGE: ${{ format('{0}-{1}-{2}', matrix.node-version, matrix.compiler, matrix.os) == 'node/16-gcc-ubuntu-16.04' }}
